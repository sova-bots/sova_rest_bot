import logging
import os
import json
from aiogram.types import BufferedInputFile
from openpyxl import Workbook
from openpyxl.styles import NamedStyle, Font
import tempfile
from aiogram import F, Router, types
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from src.analytics.handlers.msg.headers import make_header
from src.analytics.handlers.types.msg_data import MsgData
from typing import Union
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from io import BytesIO
from typing import List, Union
import logging


# –¶–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ —è—á–µ–µ–∫
POSITIVE_FILL = PatternFill(start_color="C8E6C9", end_color="C8E6C9", fill_type="solid")  # –ó–µ–ª–µ–Ω—ã–π
NEGATIVE_FILL = PatternFill(start_color="FFCDD2", end_color="FFCDD2", fill_type="solid")  # –ö—Ä–∞—Å–Ω—ã–π
HEADER_FILL = PatternFill(start_color="B0BEC5", end_color="B0BEC5", fill_type="solid")  # –°–µ—Ä—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
POSITIVE_FONT = Font(color="006400")  # –ó–µ–ª–µ–Ω—ã–π
NEGATIVE_FONT = Font(color="B71C1C")  # –ö—Ä–∞—Å–Ω—ã–π
DEFAULT_FONT = Font(color="000000")  # –ß–µ—Ä–Ω—ã–π


def format_currency(value):
    try:
        if value is None:
            return "‚Äî"
        if isinstance(value, str):
            value = value.lstrip("0") or "0"
            value = int(value)
        elif not isinstance(value, int):
            value = int(value)
        return f"{value:,}".replace(",", " ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã: {e}")
        return str(value)


def format_percentage(value: Union[int, float, None]) -> str:
    try:
        if value is None:
            return "‚Äî"
        return f"{value}%"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {e}")
        return str(value) + "%"

def load_revenue_data(filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return None


def create_revenue_excel(data: list, filename: str):
    """–°–æ–∑–¥–∞—ë—Ç Excel —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—ã—Ä—É—á–∫–∏"""
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
    number_style = NamedStyle(name="number_style", number_format="#,##0.00")
    wb.add_named_style(number_style)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
    headers = [
        "–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–í—ã—Ä—É—á–∫–∞",
        "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è",
        "–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü",
        "–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥",
        "–ü—Ä–æ–≥–Ω–æ–∑"
    ]
    ws.append(headers)

    # –ü–æ–ª—É–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏ –∑–∞–ª–∏–≤–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for cell in ws[1]:
        cell.font = Font(bold=True)
        cell.fill = HEADER_FILL

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = data[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    for item in data["data"]:
        row = [
            item["label"],
            f"{item['revenue']:.2f} ",
            f"{item['revenue_dynamics_week']:.2f} %",
            f"{item['revenue_dynamics_month']:.2f} %",
            f"{item['revenue_dynamics_year']:.2f} %",
            f"{item['revenue_forecast']:.2f} "
        ]
        ws.append(row)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ª–∏–≤–∫–∏ –∏ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
        for col_idx, key in zip([3, 4, 5], [
            "revenue_dynamics_week",
            "revenue_dynamics_month",
            "revenue_dynamics_year"
        ]):
            dynamics_value = item[key]
            cell = ws.cell(row=ws.max_row, column=col_idx + 1)
            if dynamics_value > 0:
                cell.fill = POSITIVE_FILL
                cell.font = POSITIVE_FONT
            else:
                cell.fill = NEGATIVE_FILL
                cell.font = NEGATIVE_FONT
            cell.value = f"{dynamics_value:.2f} %"

    # –°—Ç—Ä–æ–∫–∞ –∏—Ç–æ–≥–æ–≤
    total_row = [
        data["sum"]["label"],
        f"{data['sum']['revenue']:.2f} ",
        f"{data['sum']['revenue_dynamics_week']:.2f} %",
        f"{data['sum']['revenue_dynamics_month']:.2f} %",
        f"{data['sum']['revenue_dynamics_year']:.2f} %",
        f"{data['sum']['revenue_forecast']:.2f} "
    ]
    ws.append(total_row)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=2, max_col=6):
        for cell in row:
            cell.style = number_style

    # –°—Ç–∏–ª—å –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    for cell in ws[ws.max_row]:
        cell.fill = HEADER_FILL
        cell.font = Font(bold=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    wb.save(filename)
    return filename


def send_excel_report(filepath):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –æ—Ç—á—ë—Ç–∞"""
    revenue_data = load_revenue_data(filepath)
    if not revenue_data:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å
    revenue_data = revenue_data[0]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
    try:
        filename = create_revenue_excel(revenue_data, filename=f"revenue_analysis.xlsx")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞
    try:
        with open(filename, "rb") as file:
            file_data = file.read()

        input_file = BufferedInputFile(file_data, filename=f"revenue_analysis.xlsx")

        logging.info(f"–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel-—Ñ–∞–π–ª–∞: {e}")



revenue_excel_report_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Excel –æ—Ç—á–µ—Ç–∞
@revenue_excel_report_router.callback_query(F.data == "report:send_excel_report")
async def handle_send_excel_report(callback: CallbackQuery, state: FSMContext):
    msg_data = MsgData(
        msg=callback.message,
        state=state,
        tgid=callback.from_user.id
    )
    await send_excel_report(callback, msg_data)

async def send_excel_report(callback: CallbackQuery, msg_data: MsgData) -> None:
    state_data = await msg_data.state.get_data()
    report_format = "excel"

    header = await make_header(msg_data)
    text = f"{header}\n\nüìé Excel –æ—Ç—á—ë—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω."

    try:
        json_file_path = state_data.get("report:json_file_path")

        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è JSON, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not json_file_path or not os.path.exists(json_file_path):
            json_data = state_data.get("report:json_data")
            if not json_data:
                await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel.")
                return

            type_data = state_data.get("report:type", "revenue")
            period = state_data.get("report:period", "weekly")
            file_name = f"{type_data}_json_{period}.json"

            json_file_path = os.path.join(tempfile.gettempdir(), file_name)
            with open(json_file_path, "w", encoding="utf-8") as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)

            # –û–±–Ω–æ–≤–∏–º state
            state_data["report:json_file_path"] = json_file_path
            await msg_data.state.update_data(state_data)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
        excel_filename = os.path.join(tempfile.gettempdir(), "revenue_report.xlsx")
        revenue_data = load_revenue_data(json_file_path)
        create_revenue_excel(revenue_data, excel_filename)

        await callback.message.answer_document(
            document=FSInputFile(excel_filename),
            caption=text,
        )

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if "json_file_path" in locals() and os.path.exists(json_file_path):
            os.remove(json_file_path)
        if "excel_filename" in locals() and os.path.exists(excel_filename):
            os.remove(excel_filename)


logging.basicConfig(level=logging.INFO)

def safe_float(value):
    try:
        return float(value) if value not in [None, ""] else 0
    except:
        return 0

def format_rub(val):
    try:
        return f"{int(val):,}".replace(",", " ") + " "
    except:
        return str(val) or "‚Äî"

def format_percent(val):
    try:
        return f"{float(val):.2f} %"
    except:
        return "‚Äî"

def revenue_parameters_create_excel_report_analysis(data: Union[List[dict], dict]) -> BytesIO:
    if isinstance(data, list):
        if not data:
            raise ValueError("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        data = data[:9]  # –º–∞–∫—Å–∏–º—É–º 9 –±–ª–æ–∫–æ–≤
    else:
        raise ValueError("–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ JSON-–±–ª–æ–∫–æ–≤")

    wb = openpyxl.Workbook()
    wb.remove(wb.active)  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç

    # –û–±—â–∏–µ —Å—Ç–∏–ª–∏
    header_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
    gray_fill = PatternFill(start_color="D9D9D9", end_color="D9D9D9", fill_type="solid")
    red_font = Font(color="FF0000")
    green_font = Font(color="008000")
    bold_font = Font(bold=True)
    center_align = Alignment(horizontal="center", vertical="center")
    thin_border = Border(bottom=Side(style="thin"))

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤
    configs = [
        {
            "title": "–ì–æ—Å—Ç–∏-—á–µ–∫–∏",
            "columns": [
                ("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "label"),
                ("–ì–æ—Å—Ç–∏", "guests"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "guests_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "guests_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "guests_dynamics_year"),
                ("–ß–µ–∫–∏", "checks"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "checks_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "checks_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "checks_dynamics_year"),
            ],
            "format": ["text", "int", "percent", "percent", "percent", "int", "percent", "percent", "percent"]
        },
        {
            "title": "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫",
            "columns": [
                ("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "label"),
                ("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", "avg_check"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "avg_check_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "avg_check_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "avg_check_dynamics_year"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent"]
        },
        {
            "title": "–í—ã—Ä—É—á–∫–∞",
            "columns": [
                ("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "revenue_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "revenue_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "revenue_dynamics_year"),
                ("–ü—Ä–æ–≥–Ω–æ–∑", "revenue_forecast"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent", "rub"]
        },
        {
            "title": "–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º",
            "columns": [
                ("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "revenue_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "revenue_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "revenue_dynamics_year"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent"]
        },
        {
            "title": "–í—ã—Ä—É—á–∫–∞ –ø–æ –±–ª—é–¥–∞–º",
            "columns": [
                ("–ë–ª—é–¥–æ", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "revenue_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "revenue_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "revenue_dynamics_year"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent"]
        },
        {
            "title": "–í—ã—Ä—É—á–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è",
            "columns": [
                ("–í—Ä–µ–º—è", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "revenue_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "revenue_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "revenue_dynamics_year"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent"]
        },
        {
            "title": "–í—ã—Ä—É—á–∫–∞ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º",
            "columns": [
                ("–¶–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "revenue_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "revenue_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "revenue_dynamics_year"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent"]
        },
        {
            "title": "–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
            "columns": [
                ("–î–µ–Ω—å", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è", "revenue_dynamics_week"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü", "revenue_dynamics_month"),
                ("–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥", "revenue_dynamics_year"),
            ],
            "format": ["text", "rub", "percent", "percent", "percent"]
        },
        {
            "title": "–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤",
            "columns": [
                ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "label"),
                ("–í—ã—Ä—É—á–∫–∞", "revenue"),
                ("–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞", "avg_revenue"),
                ("–ß–µ–∫", "avg_checks"),
                ("–ì–ª—É–±–∏–Ω–∞ —á–µ–∫–∞", "depth"),
                ("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª", "potential"),
            ],
            "format": ["text", "rub", "rub", "int", "float", "rub"]
        },
    ]

    for i, block in enumerate(data):
        cfg = configs[i]
        ws = wb.create_sheet(title=cfg["title"])
        columns = cfg["columns"]
        formats = cfg["format"]

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for col_num, (header, _) in enumerate(columns, 1):
            cell = ws.cell(row=1, column=col_num, value=header)
            cell.font = bold_font
            cell.fill = header_fill
            cell.alignment = center_align
            cell.border = thin_border

        # –î–∞–Ω–Ω—ã–µ
        for row_num, item in enumerate(block.get("data", []), start=2):
            for col_num, ((_, key), fmt) in enumerate(zip(columns, formats), start=1):
                val = item.get(key)
                cell = ws.cell(row=row_num, column=col_num)
                if fmt == "rub":
                    cell.value = format_rub(val)
                elif fmt == "percent":
                    cell.value = format_percent(val)
                    if safe_float(val) > 0:
                        cell.font = green_font
                    elif safe_float(val) < 0:
                        cell.font = red_font
                elif fmt == "int":
                    try:
                        cell.value = int(val)
                    except:
                        cell.value = val or 0
                elif fmt == "float":
                    try:
                        cell.value = f"{float(val):.2f}"
                    except:
                        cell.value = "‚Äî"
                else:
                    cell.value = val or "‚Äî"

                cell.alignment = center_align
                cell.border = thin_border

        # –ò—Ç–æ–≥–∏
        total = block.get("sum", {})
        total_row = ws.max_row + 1
        for col_num, ((_, key), fmt) in enumerate(zip(columns, formats), start=1):
            cell = ws.cell(row=total_row, column=col_num)
            val = total.get(key)
            if fmt == "rub":
                cell.value = format_rub(val)
            elif fmt == "percent":
                cell.value = format_percent(val)
            elif fmt == "int":
                try:
                    cell.value = int(val)
                except:
                    cell.value = 0
            elif fmt == "float":
                try:
                    cell.value = f"{float(val):.2f}"
                except:
                    cell.value = "‚Äî"
            else:
                cell.value = val or "–ò—Ç–æ–≥–æ" if col_num == 1 else "‚Äî"
            cell.font = bold_font
            cell.fill = gray_fill
            cell.alignment = center_align
            cell.border = thin_border

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
        for col in ws.columns:
            max_len = max(len(str(cell.value or "")) for cell in col)
            col_letter = get_column_letter(col[0].column)
            ws.column_dimensions[col_letter].width = max_len + 2

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)
    return buffer
