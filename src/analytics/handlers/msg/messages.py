import logging
import re

from aiogram import Router
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB

from .msg_util import (
    clear_report_state_data, set_input_state, make_kb, make_kb_report_menu,
    back_current_step_btn, add_messages_to_delete, subscribe_to_mailing_btn
)
from ..types.msg_data import MsgData
from .headers import make_header
from ...api import get_reports
from ...constant.variants import all_departments, all_branches, all_types, all_periods, all_menu_buttons
from ..text.recommendations import recommendations
from ..text.revenue_texts import revenue_analysis_text, revenue_recommendations
from ..text.texts import text_functions
from ..types.text_data import TextData
from src.mailing.commands.registration.notifications.sub_mail import SubscriptionState

logger = logging.getLogger(__name__)

menu_router = Router()


async def check_state_data(state):
    data = await state.get_data()
    logging.info(f"State data: {data}")


# == –≠—Ç–∞–ø—ã –≤—ã–±–æ—Ä–∞ ==

async def department_msg(msg_data: MsgData) -> None:
    state_data = await msg_data.state.get_data()
    if state_data.get("report:step") == 0:
        await clear_report_state_data(msg_data.state)

    await set_input_state(msg_data.state, "report:department")

    departments = await all_departments(msg_data.tgid)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
    kb = make_kb(departments)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    await check_state_data(msg_data.state)


async def branch_msg(msg_data: MsgData) -> None:
    await set_input_state(msg_data.state, "report:branch")

    text = "–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –æ—Ç—á—ë—Ç–∞"
    kb = make_kb(all_branches)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    await check_state_data(msg_data.state)


async def type_msg(msg_data: MsgData, type_indexes: list[int]) -> None:
    await set_input_state(msg_data.state, "report:type")

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞"
    kb = make_kb(all_types, type_indexes)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    if type_indexes and type_indexes[0] in all_types:
        selected_type = all_types[type_indexes[0]]
        await msg_data.state.update_data(report_type=selected_type)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg_data.tgid} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {selected_type}")
    else:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞: {type_indexes}")
        return

    await msg_data.state.set_state(SubscriptionState.choosing_period)
    await msg_data.msg.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")


async def period_msg(msg_data: MsgData, period_indexes: list[int]) -> None:
    await set_input_state(msg_data.state, "report:period")

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ—Ç—á—ë—Ç–∞:"
    kb = make_kb(all_periods, period_indexes)
    await msg_data.msg.edit_text(text=text, reply_markup=kb)

    await check_state_data(msg_data.state)


# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö:
async def menu_msg(msg_data: MsgData, buttons_indexes: list[int]) -> None:
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    button = all_menu_buttons[buttons_indexes[0]]
    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ state
    await msg_data.state.update_data({"report:format_type": button.callback_data})

    # 3. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ–º make_header ‚Äî —Ç–µ–ø–µ—Ä—å –≤ state —É–∂–µ –µ—Å—Ç—å report:format_type
    header = await make_header(msg_data) + "\n\n"
    text = header + "–í—ã–±–µ—Ä–∏—Ç–µ"
    kb = make_kb_report_menu(all_menu_buttons, buttons_indexes)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if re.search(r"<(b|code)>", text):
        parse_mode = ParseMode.HTML
    else:
        parse_mode = ParseMode.MARKDOWN

    await msg_data.msg.edit_text(text=text, reply_markup=kb, parse_mode=parse_mode)


async def parameters_msg(msg_data: MsgData, type_prefix: str = "", only_negative: bool = False,
                         recommendations: bool = False) -> None:
    state_data = await msg_data.state.get_data()
    logger.info(f"[parameters_msg] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {state_data}")

    report_type = state_data.get("report:type")
    period = state_data.get("report:period")

    if not state_data.get("report:format_type"):
        new_format_type = f"report:{type_prefix or 'parameters'}"
        await msg_data.state.update_data({"report:format_type": new_format_type})
        logger.info(f"[parameters_msg] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω report:format_type -> {new_format_type}")

    state_data = await msg_data.state.get_data()
    logger.info(f"[parameters_msg] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {state_data}")

    loading_msg = await msg_data.msg.edit_text(text="–ó–∞–≥—Ä—É–∑–∫–∞... ‚è≥")

    reports = await get_reports(tgid=msg_data.tgid, state_data=state_data, type_prefix=type_prefix)
    back_kb = IKM(inline_keyboard=[[subscribe_to_mailing_btn], [back_current_step_btn]])

    if None in reports:
        logger.warning(f"[parameters_msg] –û–¥–∏–Ω –∏–∑ –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {reports}")
        await loading_msg.edit_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç", reply_markup=back_kb)
        return

    header = await make_header(msg_data)
    text_func = text_functions[type_prefix + report_type]
    text_data = TextData(reports=reports, period=period, only_negative=only_negative)

    if report_type == "revenue" and recommendations:
        texts = revenue_analysis_text(text_data)
    else:
        texts = text_func(text_data)

    for i, text in enumerate(texts):
        # –û—Å—Ç–∞–≤–ª—è–µ–º ParseMode.HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è HTML
        parse_mode = ParseMode.HTML  # –∏–ª–∏ ParseMode.MARKDOWN, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

        full_text = f"{header}\n\n{text}" if i == 0 and not re.search(r"(üìç|<code>–û–±—ä–µ–∫—Ç:|<b>–û–±—ä–µ–∫—Ç:)", text) else text
        text_msg = await msg_data.msg.answer(text=full_text, parse_mode=parse_mode)
        await add_messages_to_delete(msg_data=msg_data, messages=[text_msg])

    await msg_data.msg.answer(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?", reply_markup=back_kb)
    await loading_msg.delete()


async def recommendations_msg(msg_data: MsgData) -> None:
    state_data = await msg_data.state.get_data()
    logger.info(f"[recommendations_msg] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {state_data}")

    report_type = state_data.get("report:type")

    if not state_data.get("report:format_type"):
        await msg_data.state.update_data({"report:format_type": "report:recommendations"})
        logger.info(f"[recommendations_msg] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω report:format_type -> report:recommendations")

    state_data = await msg_data.state.get_data()
    logger.info(f"[recommendations_msg] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {state_data}")

    header = await make_header(msg_data)
    back_kb = IKM(inline_keyboard=[[subscribe_to_mailing_btn], [back_current_step_btn]])

    if report_type == "revenue":
        if revenue_recommendations:
            combined_text = "\n\n".join(revenue_recommendations.values())
            content = f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã—Ä—É—á–∫–µ üí°</b>\n\n{combined_text}"
        else:
            logger.warning("[recommendations_msg] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã—Ä—É—á–∫–µ.")
            content = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã—Ä—É—á–∫–µ."
    else:
        recommendation_text = recommendations.get(report_type)
        content = f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üí°</b>\n{recommendation_text}" if recommendation_text else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."

    final_text = content if any(tag in content for tag in ["üìç", "<b>", "<code>"]) else f"{header}\n\n{content}"

    await msg_data.msg.edit_text(text=final_text, reply_markup=back_kb, parse_mode=ParseMode.HTML)
