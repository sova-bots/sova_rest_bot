from aiogram.utils.formatting import Bold, Text, as_marked_section, as_key_value
from ..types.msg_data import MsgData
from ...constant.variants import all_departments, all_branches, all_types, all_periods, menu_button_translations

import logging

logger = logging.getLogger(__name__)

# make header
async def make_header(msg_data: MsgData) -> str:
    state_data = await msg_data.state.get_data()
    assert msg_data.tgid is not None, "tgid is not specified"

    headers = []

    department_id = state_data.get("report:department")
    branch_key = state_data.get("report:branch")
    report_type_key = state_data.get("report:type")
    period_key = state_data.get("report:period")
    format_type_key = state_data.get("report:format_type")

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    logger.info(f"[make_header] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {state_data}")
    logger.info(f"[make_header] format_type_key –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {format_type_key}")
    logger.info(f"[make_header] report_type_key: {report_type_key}, branch_key: {branch_key}")

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ñ–æ—Ä–º–∞—Ç –∫ –±–∞–∑–æ–≤–æ–º—É –≤–∏–¥—É (–±–µ–∑ show_)
    short_format_type_key = format_type_key
    if format_type_key and format_type_key.startswith("report:show_"):
        short_format_type_key = "report:" + format_type_key.split("report:show_")[1]

    # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–π –∫–ª—é—á –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    logger.info(f"[make_header] –ö–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {short_format_type_key}")

    # –ü–µ—Ä–µ–≤–æ–¥—ã
    department_name = (await all_departments(msg_data.tgid)).get(department_id)
    report_type_name = all_types.get(report_type_key)
    period_name = all_periods.get(period_key)
    format_type_name = menu_button_translations.get(short_format_type_key)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
    logger.info(f"[make_header] –ü–µ—Ä–µ–≤–æ–¥ 'format_type' –Ω–∞–π–¥–µ–Ω: {format_type_name}")
    logger.info(f"[make_header] –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞ '{report_type_key}' –Ω–∞–π–¥–µ–Ω: {report_type_name}")

    # –°–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if department_name:
        headers.append(f"üìç <code>–û–±—ä–µ–∫—Ç:</code> <b>{department_name.split('.')[-1]}</b>")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º all_types –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    if report_type_name:
        headers.append(f"üìä <code>–û—Ç—á—ë—Ç:</code> <b>{report_type_name}</b>")

    if format_type_name:
        headers.append(f"üìä <code>–§–æ—Ä–º–∞:</code> <b>{format_type_name}</b>")
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        headers.append("üìä <code>–§–æ—Ä–º–∞:</code> <b>–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–æ—Ä–º–∞—Ç</b>")

    if period_name:
        headers.append(f"üìÖ <code>–ü–µ—Ä–∏–æ–¥:</code> <b>{period_name}</b>")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å HTML-—Ç–µ–≥–∞–º–∏
    return "\n".join(headers)
