from ..types.text_data import TextData
from ..types.report_all_departments_types import ReportAllDepartmentTypes


def to_float(value):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ, –∑–∞–º–µ–Ω—è–µ—Ç null/None/–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ 0."""
    if value in [None, "null", "", "None"]:
        return 0.0
    try:
        return float(value)
    except (ValueError, TypeError):
        return 0.0


def turnover_text(text_data: TextData) -> list[str]:
    if text_data.department == ReportAllDepartmentTypes.SUM_DEPARTMENTS_TOTALLY:
        return ["–û—Ç—á—ë—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"]

    period = text_data.period
    data = text_data.reports[0]

    period_mapping = {
        "this-week": ("turnover_in_days_week", "turnover_in_days_dynamic_week"),
        "last-week": ("turnover_in_days_week", "turnover_in_days_dynamic_week"),
        "this-month": ("turnover_in_days_month", "turnover_in_days_dynamic_month"),
        "last-month": ("turnover_in_days_month", "turnover_in_days_dynamic_month"),
        "this-year": ("turnover_in_days_year", "turnover_in_days_dynamic_year"),
        "last-year": ("turnover_in_days_year", "turnover_in_days_dynamic_year"),
    }

    if period not in period_mapping:
        return ["–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."]

    turnover_key, dynamic_key = period_mapping[period]

    dynamic_label = ""
    if "week" in period:
        dynamic_label = "–¥–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è"
    elif "month" in period:
        dynamic_label = "–¥–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü"
    elif "year" in period:
        dynamic_label = "–¥–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥"

    kitchen_data = next((item for item in data["data"] if "–ö—É—Ö–Ω—è" in item["label"]), None)
    bar_data = next((item for item in data["data"] if "–ë–∞—Ä" in item["label"]), None)
    hozes_data = next((item for item in data["data"] if "–•–æ–∑—ã" in item["label"]), None)

    report = f"–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤:\n\n–æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ –¥–Ω—è—Ö / {dynamic_label}\n\n"

    if kitchen_data:
        turnover = to_float(kitchen_data.get(turnover_key))
        dynamic = to_float(kitchen_data.get(dynamic_key))
        report += f"ü•© <b>–ö—É—Ö–Ω—è:</b> {turnover:.0f} –¥–Ω–µ–π, {dynamic:+.0f}%\n"

    if bar_data:
        turnover = to_float(bar_data.get(turnover_key))
        dynamic = to_float(bar_data.get(dynamic_key))
        report += f"üç∑ <b>–ë–∞—Ä:</b> {turnover:.0f} –¥–Ω–µ–π, {dynamic:+.0f}%\n"

    if hozes_data:
        turnover = to_float(hozes_data.get(turnover_key))
        dynamic = to_float(hozes_data.get(dynamic_key))
        report += f"üßπ <b>–•–æ–∑—ã:</b> {turnover:.0f} –¥–Ω–µ–π, {dynamic:+.0f}%\n"

    return [report]


def product_turnover_text(text_data: TextData) -> list[str]:
    if text_data.department == ReportAllDepartmentTypes.SUM_DEPARTMENTS_TOTALLY:
        return ["–û—Ç—á—ë—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"]

    data = text_data.reports[1]
    period = text_data.period

    period_mapping = {
        "this-week": "turnover_in_days_week",
        "last-week": "turnover_in_days_week",
        "this-month": "turnover_in_days_month",
        "last-month": "turnover_in_days_month",
        "this-year": "turnover_in_days_year",
        "last-year": "turnover_in_days_year",
    }

    if period not in period_mapping:
        return ["–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."]

    turnover_key = period_mapping[period]

    report_lines = []
    for item in data["data"]:
        turnover = to_float(item.get(turnover_key))
        remainder_end = to_float(item.get("remainder_end"))

        formatted_price = f"{int(remainder_end):,}".replace(",", " ")
        report_lines.append(f"{item['label']}: {formatted_price} —Ä—É–±, {turnover:.0f} –¥–Ω–µ–π")

    report = turnover_text(text_data)[0] + "\n" + "\n‚Ä¢ ".join(report_lines)

    return [report]
