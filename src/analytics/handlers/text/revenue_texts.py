from ..types.text_data import TextData
from ..types.report_all_departments_types import ReportAllDepartmentTypes

revenue_recommendations = {
    "guests": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> 

–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π:

1. –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–µ—Ä–≤–∏—Å–∞, —á–∏—Å—Ç–æ—Ç—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.

2. –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –±–ª—é–¥, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é.

3. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö –≥–æ—Å—Ç–µ–π (—Å–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –∞–∫—Ü–∏–∏, –ø–æ–¥–∞—Ä–∫–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø—Ä.).

4. –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π (—Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ PR, –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏, —É—á–∞—Å—Ç–∏–µ –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –¥—Ä.).

5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
""",
    "checks": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –∏ –≥–ª—É–±–∏–Ω—ã —á–µ–∫–∞:

1. –†–∞–±–æ—Ç–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: –æ–±—É—á–µ–Ω–∏–µ –∏ —ç–∫–∑–∞–º–µ–Ω - –ø—Ä–æ–¥–∞–∂–∏ –∏ –∑–Ω–∞–Ω–∏–µ –º–µ–Ω—é; –∑–∞–ø—É—Å–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –∏ –≥–ª—É–±–∏–Ω—ã —á–µ–∫–∞.

2. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –≤ —Ä–∞–º–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –ø–æ–¥–Ω—è—Ç–∏–µ —Ü–µ–Ω –≤ –º–µ–Ω—é.

3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –º–µ–Ω—é –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π, —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π, –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–ø—Ä–æ–¥–∞–∂–∏ –∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –±–ª—é–¥–∞–º, –Ω–∞–ø–∏—Ç–∫–∞–º.
    """,

    "dish": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–∫—É—Ö–Ω—è, –±–∞—Ä), –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥

1. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (–ê–í–°-–∞–Ω–∞–ª–∏–∑ –∏ –¥—Ä.), –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –ø–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏ —Ü–µ–Ω –≤ –º–µ–Ω—é.

2. –ü–æ–≤—ã—Å—å—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—ã—Ä—å—è –∏ –≥–æ—Ç–æ–≤—ã—Ö –±–ª—é–¥.

3. –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–¥–∞—á–∏ –±–ª—é–¥.

4. –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–ª–Ω–æ—Ç—ã –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞. 
    """,

    "time": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–æ—Å–µ–¥–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏–ª–∏ —É–∂–∏–Ω:

1. –ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º (–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏).

2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –∞–∫—Ü–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è, —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –≤–Ω–µ—à–Ω–∏–π PR.
    """,

    "day_of_week": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

–° –ø–æ–º–æ—â—å—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Å–µ–¥–∞—é—â–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.
    """,

    "waiter": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

1. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –±–µ—Å–µ–¥—É —Å –æ—Ç—Å—Ç–∞—é—â–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –∏—Ö –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è.

2. –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏–ª–∏ –∑–∞–º–µ–Ω—É —ç—Ç–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """,

    "price_segments": """
<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

1. –†–∞—Å—à–∏—Ä—å—Ç–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤ –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ —Ü–µ–Ω–æ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ.

2. –ë—É–¥—å—Ç–µ –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã —Å –ø–æ–¥–Ω—è—Ç–∏–µ–º —Ü–µ–Ω –≤ –º–µ–Ω—é, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏ —è–≤–ª—è—é—Ç—Å—è –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã.
    """
}


def load_data_from_files(text_data: TextData):
    reports = text_data.reports

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    guests_checks = reports[0]['sum']

    avg_check = reports[1]['sum']

    revenue_store = reports[3]['data']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞, –∞ –Ω–µ —Å—É–º–º—É

    revenue_dish = reports[4]['data']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞, –∞ –Ω–µ —Å—É–º–º—É

    revenue_time = reports[5]['data']

    revenue_date_of_week = reports[7]['data']

    revenue_waiter = reports[8]

    revenue_price_segments = reports[6]['data']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    data = {
        'guests-checks': guests_checks,
        'avg-check': avg_check,
        'revenue-store': revenue_store,
        'revenue-dish': revenue_dish,
        'revenue-time': revenue_time,
        'revenue-date_of_week': revenue_date_of_week,
        'revenue-waiter': revenue_waiter,
        'revenue-price_segments': revenue_price_segments,
        "check-depth": reports[8]['sum']
    }

    return data


def analyze_revenue(data, period="week", only_negative: bool = False, recommendations: bool = False):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    period_keys = {
               "week": {
            "revenue_key": "week",
            "dynamics_key": "dynamics_week",
            "dynamic_key": "dynamic_week",
            "label": "–Ω–µ–¥–µ–ª—é",
            "dynamics_label": "–¥–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª–∏"
        },
        "month": {
            "revenue_key": "month",
            "dynamics_key": "dynamics_month",
            "dynamic_key": "dynamic_month",
            "label": "–º–µ—Å—è—Ü",
            "dynamics_label": "–¥–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü–∞"
        },
        "year": {
            "revenue_key": "year",
            "dynamics_key": "dynamics_year",
            "dynamic_key": "dynamic_year",
            "label": "–≥–æ–¥",
            "dynamics_label": "–¥–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥–∞"
        }
    }

    if period not in period_keys:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'week', 'month' –∏–ª–∏ 'year'.")

    revenue_key = period_keys[period]["revenue_key"]
    dynamics_key = period_keys[period]["dynamics_key"]
    dynamic_key = period_keys[period]["dynamic_key"]
    period_label = period_keys[period]["label"]
    dynamics_label = period_keys[period]["dynamics_label"]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞
    message = (
        ""
    )

    # 1. –ì–æ—Å—Ç–µ–≤–æ–π –ø–æ—Ç–æ–∫ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    guests_checks = data['guests-checks']
    avg_check = data['avg-check']
    check_depth = data['check-depth']
    message += (
        f"<b> 1 –ì–æ—Å—Ç–µ–≤–æ–π –ø–æ—Ç–æ–∫ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ ({dynamics_label}):</b>\n"
    )

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ
    metrics = [
        {
            "label": "–≥–æ—Å—Ç–µ–ø–æ—Ç–æ–∫",
            "value": guests_checks.get(f'guests_{dynamics_key}', 0),
            "current": guests_checks.get('guests', 0),
            "previous": guests_checks.get(f'guests_{revenue_key}', 0)
        },
    ]

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    negative_changes = [m for m in metrics if m['value'] < 0]
    positive_changes = [m for m in metrics if m['value'] >= 0]

    # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
    if only_negative and not negative_changes:
        message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
    message += "\n"

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if negative_changes:
        message += "<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
        for metric in negative_changes:
            message += (
                f"- {metric['label']}: {metric['value']:.1f}%, "
                f"{metric['previous']:,.0f} ‚Üí {metric['current']:,.0f}\n"
            )
        message += "\n"

    # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if positive_changes and not only_negative:
        message += "<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
        for metric in positive_changes:
            message += (
                f"+ {metric['label']}: {metric['value']:.1f}%, "
                f"{metric['previous']:,.0f} ‚Üí {metric['current']:,.0f}\n"
            )
        message += "\n"

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if recommendations and negative_changes:
        message += revenue_recommendations["guests"] + "\n"

    # —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    message += (
        f"<b> C—Ä–µ–¥–Ω–∏–π —á–µ–∫ ({dynamics_label}):</b>\n"
    )

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ
    metrics = [
        {
            "label": "—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫",
            "value": avg_check.get(f'avg_check_{dynamics_key}', 0),
            "current": avg_check.get('avg_check', 0),
            "previous": avg_check.get(f'avg_check_{revenue_key}', 0)
        },
        {
            "label": "–≥–ª—É–±–∏–Ω–∞ —á–µ–∫–∞",
            "value": check_depth.get(f'depth_{dynamic_key}', 0),
            "current": check_depth.get('depth', 0),
            "previous": check_depth.get(f'depth_{revenue_key}', 0)
        },
        {
            "label": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤",
            "value": guests_checks.get(f'checks_{dynamics_key}', 0),
            "current": guests_checks.get('checks', 0),
            "previous": guests_checks.get(f'checks_{revenue_key}', 0)
        }
    ]

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    negative_changes = [m for m in metrics if m['value'] < 0]
    positive_changes = [m for m in metrics if m['value'] >= 0]

    # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
    if only_negative and not negative_changes:
        message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
    message += "\n"

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if negative_changes:
        message += "<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
        for metric in negative_changes:
            message += (
                f"- {metric['label']}: {metric['value']:.1f}%, "
                f"{metric['previous']:,.0f} ‚Üí {metric['current']:,.0f}\n"
            )
        message += "\n"

    # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if positive_changes and not only_negative:
        message += "<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
        for metric in positive_changes:
            message += (
                f"+ {metric['label']}: {metric['value']:.1f}%, "
                f"{metric['previous']:,.0f} ‚Üí {metric['current']:,.0f}\n"
            )
        message += "\n"

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if recommendations and negative_changes:
        message += revenue_recommendations["checks"] + "\n"

    # 2. –í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (–±–∞—Ä –∏ –∫—É—Ö–Ω—è)
    revenue_store = data['revenue-store']

    # –°—É–º–º–∏—Ä—É–µ–º –≤—ã—Ä—É—á–∫—É –≤—Å–µ—Ö –±–∞—Ä–æ–≤ –∏ –≤—Å–µ—Ö –∫—É—Ö–æ–Ω—å –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥—ã
    total_bar_revenue_current = sum(item['revenue'] for item in revenue_store if "–ë–∞—Ä" in item['label'])
    total_bar_revenue_previous = sum(item[f'revenue_{revenue_key}'] for item in revenue_store if "–ë–∞—Ä" in item['label'])

    total_kitchen_revenue_current = sum(item['revenue'] for item in revenue_store if "–ö—É—Ö–Ω—è" in item['label'])
    total_kitchen_revenue_previous = sum(
        item[f'revenue_{revenue_key}'] for item in revenue_store if "–ö—É—Ö–Ω—è" in item['label'])

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    bar_dynamics = ((
                            total_bar_revenue_current - total_bar_revenue_previous) / total_bar_revenue_previous) * 100 if total_bar_revenue_previous != 0 else 0
    kitchen_dynamics = ((
                                total_kitchen_revenue_current - total_kitchen_revenue_previous) / total_kitchen_revenue_previous) * 100 if total_kitchen_revenue_previous != 0 else 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message += f"<b>2 –í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º ({dynamics_label}):</b>\n"

    store_has_negative = bar_dynamics != abs(bar_dynamics) or kitchen_dynamics != abs(kitchen_dynamics)

    # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
    if only_negative and not store_has_negative:
        message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
    message += "\n"

    # –ø—Ä–æ–≤–µ—Ä–∫–∞
    if bar_dynamics != abs(bar_dynamics) or not only_negative:
        message += f"{'+' if bar_dynamics == abs(bar_dynamics) else '-'} –±–∞—Ä: {bar_dynamics:.1f}%, {total_bar_revenue_previous:,.0f} ‚Üí {total_bar_revenue_current:,.0f}\n"

    if kitchen_dynamics != abs(kitchen_dynamics) or not only_negative:
        message += f"{'+' if kitchen_dynamics == abs(kitchen_dynamics) else '-'} –∫—É—Ö–Ω—è: {kitchen_dynamics:.1f}%, {total_kitchen_revenue_previous:,.0f} ‚Üí {total_kitchen_revenue_current:,.0f}\n\n"

    # 3. –í—ã—Ä—É—á–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥
    revenue_dish = data['revenue-dish']
    if revenue_dish:
        message += f"<b>3 –í—ã—Ä—É—á–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥ ({dynamics_label}):</b>\n"

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥
        dish_categories = {
            "–°–∞–ª–∞—Ç—ã": [],
            "–°—É–ø—ã": [],
            "–í—ã–ø–µ—á–∫–∞": [],
            "–ö–æ—Ñ–µ": [],
            "–î—Ä—É–≥–∏–µ": []  # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–ª—é–¥
        }

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for dish in revenue_dish:
            label = dish['label'].lower()
            if "—Å–∞–ª–∞—Ç" in label:
                dish_categories["–°–∞–ª–∞—Ç—ã"].append(dish)
            elif "—Å—É–ø" in label:
                dish_categories["–°—É–ø—ã"].append(dish)
            elif "–≤—ã–ø–µ—á–∫–∞" in label or "–ø–∏—Ä–æ–≥" in label or "—Ç–æ—Ä—Ç" in label:
                dish_categories["–í—ã–ø–µ—á–∫–∞"].append(dish)
            elif "–∫–æ—Ñ–µ" in label or "–∫–∞–ø—É—á–∏–Ω–æ" in label or "–ª–∞—Ç—Ç–µ" in label:
                dish_categories["–ö–æ—Ñ–µ"].append(dish)
            else:
                dish_categories["–î—Ä—É–≥–∏–µ"].append(dish)

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_data = []
        for category, dishes in dish_categories.items():
            if dishes:
                total_revenue_previous = sum(dish.get(f'revenue_{revenue_key}', 0) for dish in dishes)
                total_revenue_current = sum(dish.get('revenue', 0) for dish in dishes)
                total_dynamics = ((
                                          total_revenue_current - total_revenue_previous) / total_revenue_previous) * 100 if total_revenue_previous != 0 else 0

                category_data.append({
                    "category": category,
                    "dynamics": total_dynamics,
                    "revenue_previous": total_revenue_previous,
                    "revenue_current": total_revenue_current
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
        negative_changes = [item for item in category_data if item['dynamics'] < 0]
        positive_changes = [item for item in category_data if item['dynamics'] >= 0]

        # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
        if only_negative and not negative_changes:
            message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
        message += "\n"

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if negative_changes:
            message += "<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
            for item in negative_changes:
                message += (
                    f"{item['category']}: {item['dynamics']:.1f}%, "
                    f"{item['revenue_previous']:,.0f} ‚Üí {item['revenue_current']:,.0f}\n"
                )
            message += "\n"

        # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if positive_changes and not only_negative:
            message += "<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
            for item in positive_changes:
                message += (
                    f"{item['category']}: {item['dynamics']:.1f}%, "
                    f"{item['revenue_previous']:,.0f} ‚Üí {item['revenue_current']:,.0f}\n"
                )
            message += "\n"

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if recommendations and (negative_changes or store_has_negative):
            message += revenue_recommendations["dish"] + "\n"

    # 4. –í—ã—Ä—É—á–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
    revenue_time = data['revenue-time']
    message += f"<b>4 –í—ã—Ä—É—á–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è ({dynamics_label}):</b>\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
    negative_changes = []
    positive_changes = []

    for time_slot in revenue_time:
        label = time_slot['label']
        dynamics = time_slot.get(f'revenue_{dynamics_key}', 0) or 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0, –µ—Å–ª–∏ –¥–∏–Ω–∞–º–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        revenue_previous = time_slot.get(f'revenue_{revenue_key}', 0)
        revenue_current = time_slot.get('revenue', 0)

        if dynamics < 0:
            negative_changes.append((label, dynamics, revenue_previous, revenue_current))
        else:
            positive_changes.append((label, dynamics, revenue_previous, revenue_current))

    # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
    if only_negative and not negative_changes:
        message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
    message += "\n"

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if negative_changes:
        message += "<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
        for label, dynamics, revenue_previous, revenue_current in negative_changes:
            message += f"{label}: {dynamics:.1f}%, {revenue_previous:,.0f} ‚Üí {revenue_current:,.0f}\n"
        message += "\n"

    # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if positive_changes and not only_negative:
        message += "<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
        for label, dynamics, revenue_previous, revenue_current in positive_changes:
            message += f"{label}: {dynamics:.1f}%, {revenue_previous:,.0f} ‚Üí {revenue_current:,.0f}\n"
        message += "\n"

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if recommendations and negative_changes:
        message += revenue_recommendations["time"] + "\n"

    # 5. –í—ã—Ä—É—á–∫–∞ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
    revenue_price_segments = data.get('revenue-price_segments', [])
    message += f"<b>5 –í—ã—Ä—É—á–∫–∞ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º ({dynamics_label}):</b>\n"

    if revenue_price_segments:
        negative_changes = []
        positive_changes = []

        for segment in revenue_price_segments:
            label = segment.get('label', '')
            dynamics = segment.get(f'revenue_{dynamics_key}', 0) or 0
            revenue_previous = segment.get(f'revenue_{revenue_key}', 0)
            revenue_current = segment.get('revenue', 0)

            if dynamics < 0:
                negative_changes.append((label, dynamics, revenue_previous, revenue_current))
            else:
                positive_changes.append((label, dynamics, revenue_previous, revenue_current))

        # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
        if only_negative and not negative_changes:
            message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
        message += "\n"

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if negative_changes:
            message += "<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
            for label, dynamics, revenue_previous, revenue_current in negative_changes:
                message += f"- {label}: {dynamics:.1f}%, {revenue_previous:,.0f} ‚Üí {revenue_current:,.0f}\n"
            message += "\n"

        # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if positive_changes and not only_negative:
            message += "<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
            for label, dynamics, revenue_previous, revenue_current in positive_changes:
                message += f"+ {label}: {dynamics:.1f}%, {revenue_previous:,.0f} ‚Üí {revenue_current:,.0f}\n"
            message += "\n"

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if recommendations and negative_changes:
            message += revenue_recommendations["price_segments"] + "\n"

    else:
        message += "–î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n"

    # 6. –í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    revenue_date_of_week = data['revenue-date_of_week']
    message += f"<b>6 –í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ({dynamics_label}):</b>\n"

    if isinstance(revenue_date_of_week, list):
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
        days_of_week = {
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ü–Ω",
            "–í—Ç–æ—Ä–Ω–∏–∫": "–í—Ç",
            "–°—Ä–µ–¥–∞": "–°—Ä",
            "–ß–µ—Ç–≤–µ—Ä–≥": "–ß—Ç",
            "–ü—è—Ç–Ω–∏—Ü–∞": "–ü—Ç",
            "–°—É–±–±–æ—Ç–∞": "–°–±",
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–í—Å"
        }

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        day_data = {}
        for full_day, short_day in days_of_week.items():
            day_info = next((item for item in revenue_date_of_week if item['label'] == full_day), None)
            if day_info:
                day_data[short_day] = {
                    "dynamics": day_info.get(f'revenue_{dynamics_key}', 0),
                    "revenue_previous": day_info.get(f'revenue_{revenue_key}', 0),
                    "revenue_current": day_info.get('revenue', 0)
                }

        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        negative_days = {day: data_ for day, data_ in day_data.items() if data_['dynamics'] < 0}
        positive_days = {day: data_ for day, data_ in day_data.items() if data_['dynamics'] >= 0}

        # –í—ã–≤–µ—Å—Ç–∏ "–≤—Å—ë –≤ –≤–æ—Ä—è–¥–∫–µ" –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫
        if only_negative and not negative_days:
            message += "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ üëç\n"
        message += "\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if negative_days:
            message += "<i>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
            for day, data_ in negative_days.items():
                message += f"- {day}: {data_['dynamics']:.1f}%, {data_['revenue_previous']:,.0f} ‚Üí {data_['revenue_current']:,.0f}\n"
            message += "\n"

        if positive_days and not only_negative:
            message += "<i>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:</i>\n"
            for day, data_ in positive_days.items():
                message += f"+ {day}: {data_['dynamics']:.1f}%, {data_['revenue_previous']:,.0f} ‚Üí {data_['revenue_current']:,.0f}\n"
            message += "\n"

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if recommendations and negative_days:
            message += revenue_recommendations["day_of_week"] + "\n"

    else:
        message += "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"

    # 7. –í—ã—Ä—É—á–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º

    revenue_waiter = data['revenue-waiter']
    if revenue_waiter and 'data' in revenue_waiter:
        waiters = revenue_waiter['data']
        message += f"<b>7 –í—ã—Ä—É—á–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º ({dynamics_label}):</b>\n\n"

        # –ü–æ—Ç–µ—Ä—è –≤—ã—Ä—É—á–∫–∏ (—Ç–æ–ø-10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–æ—Ç–µ—Ä–µ–π)
        message += "<i>7.1 –ü–æ—Ç–µ—Ä—è –≤—ã—Ä—É—á–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (—Ç–æ–ø-10):</i>\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ—Ç–µ—Ä–∏ –≤—ã—Ä—É—á–∫–∏
        loss_waiters = sorted(
            [waiter for waiter in waiters if waiter.get('revenue', 0) < 0],
            key=lambda x: x['revenue']
        )[:10]  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10

        for waiter in loss_waiters:
            message += (
                f"{waiter['label']} {waiter['revenue']} —Ä—É–±\n"
                f"| —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ {waiter['avg_revenue']:,.0f} —Ä—É–±\n"
                f"| —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {waiter['avg_checks']:,.0f} —Ä—É–±\n"
                f"| –≥–ª—É–±–∏–Ω–∞ —á–µ–∫–∞ {waiter['depth']}\n\n"
            )

        if not loss_waiters:
            message += "\t<i>-</i>\n\n"

        # –ü–æ—Ö–≤–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (—Ç–æ–ø-10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤—ã—Ä—É—á–∫–æ–π)
        if not only_negative:
            message += "<i>7.2 –ü–æ—Ö–≤–∞–ª–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Ç–æ–ø-10):</i>\n"
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—ã—Ä—É—á–∫–∏
            praise_waiters = sorted(
                [waiter for waiter in waiters if waiter.get('revenue', 0) > 0],
                key=lambda x: x['revenue'],
                reverse=True
            )[:10]  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10

            for waiter in praise_waiters:
                message += (
                    f"<b><i>{waiter['label']}</i></b>\n"
                    f"| —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ {waiter['avg_revenue']:,.0f} —Ä—É–±\n"
                    f"| —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {waiter['avg_checks']:,.0f} —Ä—É–±\n"
                    f"| –≥–ª—É–±–∏–Ω–∞ —á–µ–∫–∞ {waiter['depth']}\n\n"
                )

            if not praise_waiters:
                message += "\t<i>-</i>\n\n"

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if recommendations and loss_waiters:
            message += revenue_recommendations["waiter"] + "\n"

    return message


def revenue_analysis_text(text_data: TextData, recommendations: bool = False) -> list[str]:
    data = load_data_from_files(text_data)

    if text_data.period in ["this-month", "last-month"]:
        period = "month"
    elif text_data.period in ["this-week", "last-week"]:
        period = "week"
    elif text_data.period in ["this-year", "last-year"]:
        period = "year"
    else:
        period = "month"

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

    text = analyze_revenue(data, period, text_data.only_negative, recommendations)
    max_length = 4096
    parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
    return parts


def revenue_str_if_exists(name, value, properties, is_dynamic: bool) -> str:
    if name not in properties.keys() or value is None:
        return ""

    if is_dynamic:
        if value > 0:
            sign = "+"
        else:
            sign = ""
        return f"<b>{properties[name][0]}:</b> {sign}{value:,.0f} % \n"

    return f"<b>{properties[name][0]}:</b> {value:,.0f} {properties[name][1]} \n"


def revenue_text(text_data: TextData) -> list[str]:
    reports = text_data.reports[0]

    ### –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–í—Å—è —Å–µ—Ç—å (–∏—Ç–æ–≥–æ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º)", —Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å "data" –Ω–∞ "sum"
    if text_data.department == ReportAllDepartmentTypes.SUM_DEPARTMENTS_TOTALLY:
        reports = [reports["sum"]]
    else:
        reports = reports["data"]
    ###

    revenue_properties = {
        "properties1": {
            "revenue": ["–í—ã—Ä—É—á–∫–∞", "—Ä—É–±"]
        },
        "dynamics": {
            "revenue_dynamics_week": ["–î–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è"],
            "revenue_dynamics_month": ["–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Å—è—Ü"],
            "revenue_dynamics_year": ["–î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥"],
        },
        "properties2": {
            "revenue_forecast": ["–ü—Ä–æ–≥–Ω–æ–∑", "—Ä—É–±"]
        }
    }
    texts = []
    is_one = len(reports) == 1
    for report in reports:
        if is_one:
            text = ""
        else:
            text = f"<code>{report.get('label')}</code>\n\n"

        for prop_type, props in revenue_properties.items():
            for k, v in report.items():
                is_dynamic = prop_type == "dynamics"
                text += revenue_str_if_exists(k, v, props, is_dynamic)
            text += '\n'
        texts.append(text)
    return texts


def f_dynamic(n: int) -> str:
    if n > 0:
        return f"+{n:,.0f}"
    return f"{n:,.0f}"

# def make_one_text(r: dict, report_literal: str, label: str, period: str) -> tuple[str, bool]:
#     period = period.split('-')[-1]

#     dynamics = r[f'{report_literal}_dynamics_{period}']

#     if dynamics is None:
#         pass
#     elif dynamics > 0:
#         dynamics = f"+{dynamics:,.0f}"
#     else:
#         dynamics = f"{dynamics:,.0f}"

#     last_parameter = f"{r[f'{report_literal}_{period}']:,.0f}" if r[f'{report_literal}_{period}'] is not None else None
#     parameter = f"{r[f'{report_literal}']:,.0f}" if r[f'{report_literal}'] is not None else None
#     text = f"{label}: {dynamics}%; {last_parameter} / {parameter}"

#     if r[f'{report_literal}_dynamics_{period}'] is not None:
#         positive = r[f'{report_literal}_dynamics_{period}'] >= 0
#     else:
#         positive = True

#     return text, positive


# def str_positive_negative(texts_positive: list[str], texts_negative: list[str], only_negative: bool) -> str:
#     text = ""

#     if not only_negative:
#         text += "\"-\" "

#     for t in texts_negative:
#         if t != texts_negative[0] and not only_negative:
#             text += "\t\t\t\t"
#         text += t + "\n"

#     if only_negative:
#         return text

#     text += "\"+\" "
#     for t in texts_positive:
#         if t != texts_positive[0]:
#             text += "\t\t\t\t"
#         text += t + "\n"

#     return text


# def revenue_analysis_text(text_data: TextData, msg_type: str = ""):

#     if not msg_type and text_data.only_negative:
#         msg_type = "only_negative"

#     period = text_data.period

#     guests_checks_data = text_data.reports[0]
#     avg_check_data = text_data.reports[1]
#     revenue_data = text_data.reports[2]
#     revenue_stores_data = text_data.reports[3]
#     revenue_date_of_week_data = text_data.reports[4]

#     text_list = []

#     for i in range(min(len(guests_checks_data["data"]), len(avg_check_data["data"]))):
#         label = guests_checks_data["data"][i]["label"]

#         period_literal = period.split('-')[-1]

#         only_negative = msg_type == "only_negative" or msg_type == "revenue_recomendations"

#         text = f"<i>{label}</i>\n\n"

#         guests_text, guests_positive = make_one_text(guests_checks_data["data"][i], "guests", "–≥–æ—Å—Ç–µ–ø–æ—Ç–æ–∫", period)
#         avg_check_text, avg_check_positive = make_one_text(avg_check_data["data"][i], "avg_check", "—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫", period)
#         checks_text, checks_positive = make_one_text(guests_checks_data["data"][i], "checks", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤", period)

#         check_texts_positive = []
#         check_texts_negative = []

#         if guests_positive:
#             check_texts_positive.append(guests_text)
#         else:
#             check_texts_negative.append(guests_text)

#         if avg_check_positive:
#             check_texts_positive.append(avg_check_text)
#         else:
#             check_texts_negative.append(avg_check_text)

#         if checks_positive:
#             check_texts_positive.append(checks_text)
#         else:
#             check_texts_negative.append(checks_text)

#         if msg_type != "revenue_recomendations":
#             text += "1. <b>–ì–æ—Å—Ç–µ–ø–æ—Ç–æ–∫ –∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b>\n"
#             text += str_positive_negative(check_texts_positive, check_texts_negative, only_negative)

#         if msg_type == "revenue_recomendations" and not guests_positive:
#             text += f"1. <b>–ì–æ—Å—Ç–µ–ø–æ—Ç–æ–∫:</b>\n"
#             text += guests_text + "\n"
#             text += "\n" + recommendations['guests']

#         if msg_type == "revenue_recomendations" and not avg_check_positive:
#             text += f"1. <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b>\n"
#             text += avg_check_text + "\n"
#             text += checks_text + "\n"
#             text += "\n" + recommendations['avg_check']

#         text += "\n\n2. <b>–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:</b>\n"

#         store_texts_positive = []
#         store_texts_negative = []

#         revenue_current = revenue_data["data"][i]["revenue"]
#         revenue_last_period = revenue_data["data"][i][f"revenue_{period_literal}"]

#         for store_data in revenue_stores_data["data"]:
#             store_label = store_data['label']

#             store_revenue_dynamic = store_data[f"revenue_dynamics_{period_literal}"]
#             store_revenue_dynamic = store_revenue_dynamic if store_revenue_dynamic is not None else "<i>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>"

#             store_text = f"{store_label}: {f_dynamic(store_revenue_dynamic)}, {f_dynamic(store_data["revenue"] / revenue_last_period * 100)}% / {f_dynamic(store_data["revenue"] / revenue_current * 100)}%"

#             if isinstance(store_revenue_dynamic, int) and store_revenue_dynamic >= 0:
#                 store_texts_positive.append(store_text)
#             else:
#                 store_texts_negative.append(store_text)

#         text += str_positive_negative(store_texts_positive, store_texts_negative, only_negative)

#         if msg_type == "revenue_recomendations" and len(store_texts_negative) > 0:
#             text += "\n" + recommendations['stores'] + "\n"

#         text += "\n\n6. <b>–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"

#         date_of_week_texts_positive = []
#         date_of_week_texts_negative = []

#         for date_of_week_data in revenue_date_of_week_data['data']:
#             weekdays = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–Ω", "–í—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç", "–°—Ä–µ–¥–∞": "—Å—Ä", "–ß–µ—Ç–≤–µ—Ä–≥": "—á—Ç", "–ü—è—Ç–Ω–∏—Ü–∞": "–ø—Ç", "–°—É–±–±–æ—Ç–∞": "—Å–±", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–≤—Å"}

#             date_of_week_dynamics = date_of_week_data[f"revenue_dynamics_{period_literal}"]
#             date_of_week_dynamics = date_of_week_dynamics if date_of_week_dynamics is not None else "<i>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>"

#             date_of_week_text = f"{weekdays[date_of_week_data['label']]}: {date_of_week_dynamics}%"

#             if isinstance(date_of_week_dynamics, int) and date_of_week_dynamics >= 0:
#                 date_of_week_texts_positive.append(date_of_week_text)
#             else:
#                 date_of_week_texts_negative.append(date_of_week_text)

#         text += str_positive_negative(date_of_week_texts_positive, date_of_week_texts_negative, only_negative)

#         if msg_type == "revenue_recomendations" and len(date_of_week_texts_negative) > 0:
#             text += "\n" + recommendations['days_of_week'] + "\n"

#         text_list.append(text)

#     return text_list