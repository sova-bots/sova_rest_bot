from ..types.text_data import TextData


PERIOD_TRANSLATION = {
    "week": "–Ω–µ–¥–µ–ª—é",
    "month": "–º–µ—Å—è—Ü",
    "year": "–≥–æ–¥"
}


def make_markup_text(text_data: TextData):
    store_data = text_data.reports[0]

    if text_data.period in ["this-month", "last-month"]:
        period = "month"
    elif text_data.period in ["this-week", "last-week"]:
        period = "week"
    elif text_data.period in ["this-year", "last-year"]:
        period = "year"
    else:
        period = "month"

    only_negative = text_data.only_negative

    store_report = generate_markup_store_report(store_data, period, only_negative)

    return [store_report]


def make_markup_analysis_text(text_data: TextData):
    store_data = text_data.reports[0]
    dish_data = text_data.reports[1]

    if text_data.period in ["this-month", "last-month"]:
        period = "month"
    elif text_data.period in ["this-week", "last-week"]:
        period = "week"
    elif text_data.period in ["this-year", "last-year"]:
        period = "year"
    else:
        period = "month"

    only_negative = text_data.only_negative

    store_report = generate_markup_store_report(store_data, period, only_negative)
    dish_report = generate_markup_dish_report(dish_data, period, only_negative)

    return ["\n\n".join([store_report, dish_report])]


def generate_markup_store_report(data, period="month", only_negative=False):
    # –ü–µ—Ä–µ–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    period_ru = PERIOD_TRANSLATION.get(period, "–º–µ—Å—è—Ü")

    # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞
    report = f"<b>–ù–∞—Ü–µ–Ω–∫–∞ –∑–∞ {period_ru}:</b>\n\n"

    # –ö–ª—é—á –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
    dynamics_key = f"markup_dynamics_{period}"

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    positive_changes = []
    negative_changes = []

    for item in data["data"]:
        label = item["label"]
        markup = item["markup"]
        dynamics = item.get(dynamics_key, 0)  # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –ø–æ –∫–ª—é—á—É

        if dynamics is None:
            continue

        if dynamics < 0:
            negative_changes.append(f"<b>{label}</b>:  {markup:,.1f}%")
        else:
            positive_changes.append(f"<b>{label}</b>:  {markup:,.1f}%")

    # –í—ã–≤–æ–¥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if negative_changes:
        report += "<b>üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏:</b>\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è
        report += "\n".join(negative_changes) + "\n"

    # –í—ã–≤–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω only_negative)
    if not only_negative and positive_changes:
        report += "<b>üìà –†–æ—Å—Ç –Ω–∞—Ü–µ–Ω–∫–∏:</b>\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–æ—Å—Ç–∞
        report += "\n".join(positive_changes) + "\n"

    return report


def generate_markup_dish_report(data, period="month", only_negative=False):
    # –ü–µ—Ä–µ–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    period_ru = PERIOD_TRANSLATION.get(period, "–º–µ—Å—è—Ü")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞
    report = f"<b>–¢–û–ü 5 –ø–æ–∑–∏—Ü–∏–π –ø–æ –Ω–∞—Ü–µ–Ω–∫–µ (–∑–∞ {period_ru}):</b>\n\n"

    # –ö–ª—é—á –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
    dynamics_key = f"markup_dynamics_{period}"

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞—Ü–µ–Ω–∫–∏
    # –ó–∞–º–µ–Ω—è–µ–º None –Ω–∞ 0 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sorted_data = sorted(data["data"], key=lambda x: x.get(dynamics_key, 0) or 0)

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    positive_changes = []
    negative_changes = []

    for item in sorted_data[:5]:
        label = item["label"]
        markup = item["markup"]
        dynamics = item.get(dynamics_key, 0)  # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –ø–æ –∫–ª—é—á—É

        if dynamics is None:
            continue

        if dynamics < 0:
            negative_changes.append(f"{len(negative_changes) + 1}. {label}: {markup}%, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {dynamics}%")
        else:
            positive_changes.append(f"{len(positive_changes) + 1}. {label}: {markup}%, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {dynamics}%")

    # –í—ã–≤–æ–¥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if negative_changes:
        report += "<b>üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏:</b>\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è
        report += "\n".join(negative_changes) + "\n"

    # –í—ã–≤–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω only_negative)
    if not only_negative and positive_changes:
        report += "<b>üìà –†–æ—Å—Ç –Ω–∞—Ü–µ–Ω–∫–∏:</b>\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–æ—Å—Ç–∞
        report += "\n".join(positive_changes) + "\n"

    return report
