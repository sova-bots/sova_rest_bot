from ..types.text_data import TextData
from ..types.report_all_departments_types import ReportAllDepartmentTypes

shortage_limit = 2.0
surplus_limit = 3.0


def safe_get(data: dict, key: str, placeholder: str = "<i>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>", comma: bool = False) -> str:
    value = data.get(key)
    if value is None:
        return placeholder

    if comma and str(value).isdigit():
        return f"{value:,}"

    return value


def inventory_text(text_data: TextData) -> list[str]:
    data = text_data.reports[0]["data"]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if len(data) == 0:
        return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

    # –ø—Ä–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –∏—Ç–æ–≥–æ
    if text_data.department == ReportAllDepartmentTypes.SUM_DEPARTMENTS_TOTALLY:
        data = [text_data.reports[0]["sum"]]
        data[0]["shortage_percent"] = round(data[0]["shortage"] / data[0]["cost_price"] * 1000) / 10
        data[0]["surplus_percent"] = round(data[0]["surplus"] / data[0]["cost_price"] * 1000) / 10

    texts = []
    for index in range(0, len(data), 3):
        text_group = ""
        for report in data[index:index + 3]:
            text = f"<b>{report['label'].split('.')[-1]}</b>\n"

            add_shortage = (
                report["shortage_percent"] is not None and
                (not text_data.only_negative or report["shortage_percent"] > shortage_limit)
            )
            add_surplus = (
                report["surplus_percent"] is not None and
                (not text_data.only_negative or report["surplus_percent"] > surplus_limit)
            )

            # –ù–µ–¥–æ—Å—Ç–∞—á–∞
            if add_shortage:
                shortage = safe_get(report, 'shortage', '0')
                shortage_percent = safe_get(report, 'shortage_percent', '0')
                text += f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—á–∞: {shortage} —Ä—É–±; {shortage_percent}% –æ—Ç —Å/—Å\n"

            # –ò–∑–ª–∏—à–∫–∏
            if add_surplus:
                surplus = safe_get(report, 'surplus', '0')
                surplus_percent = safe_get(report, 'surplus_percent', '0')
                text += f"‚Ä¢ –ò–∑–ª–∏—à–∫–∏: {surplus} —Ä—É–±; {surplus_percent}% –æ—Ç —Å/—Å\n"

            if add_shortage or add_surplus:
                text_group += text + "\n"

        if text_group:
            texts.append(text_group)

    if not texts:
        return ["–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º
    header = "üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ / –¥–∏–Ω–∞–º–∏–∫–∞</b>\n"
    texts[0] = header + texts[0]

    return texts



def write_off_text(text_data: TextData) -> list[str]:
    report = text_data.reports[0]["data"]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    period_labels = {
        "this-week": "–Ω–µ–¥–µ–ª—è",
        "this-month": "–º–µ—Å—è—Ü",
        "this-year": "–≥–æ–¥",
        "last-week": "–Ω–µ–¥–µ–ª—è",
        "last-month": "–º–µ—Å—è—Ü",
        "last-year": "–≥–æ–¥",
    }

    # –ö–ª—é—á–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    period_keys = {
        "this-week": "write_off_dynamics_week",
        "this-month": "write_off_dynamics_month",
        "this-year": "write_off_dynamics_year",
        "last-week": "write_off_dynamics_week",
        "last-month": "write_off_dynamics_month",
        "last-year": "write_off_dynamics_year",
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞
    dynamics_key = period_keys[text_data.period]
    period_label = period_labels[text_data.period]

    texts = [[]]
    count = 15
    cnt = 0
    cnt_texts = 0

    for item in report:
        write_off_value = item.get("write_off")
        dynamics_value = item.get(dynamics_key)

        if write_off_value is None or dynamics_value is None:
            continue

        if text_data.only_negative and dynamics_value < 0:
            continue

        write_off_str = f"{int(write_off_value):,}".replace(",", " ")
        dynamics_str = f"{dynamics_value:.0f}%"

        text = f"‚Ä¢ <b>{item['label']}</b> {write_off_str} —Ä—É–±; {dynamics_str}"
        texts[cnt_texts].append(text)
        cnt += 1

        if cnt >= count:
            texts.append([])
            cnt_texts += 1
            cnt = 0

    if not any(texts):
        return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø–∏—Å–∞–Ω–∏—è–º"]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–µ—Ä–∏–æ–¥
    header = f"üìâ <b>–°–ø–∏—Å–∞–Ω–∏—è / –¥–∏–Ω–∞–º–∏–∫–∞ {period_label}</b>\n"

    return [header + "\n".join(block) for block in texts if block]
