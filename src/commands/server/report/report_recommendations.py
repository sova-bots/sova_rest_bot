from datetime import datetime, timedelta

import requests
from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB

import config as cf
from .report_util import *
from src.commands.server.util.db import user_tokens_db
from src.log import logger
from .text_problem_areas import get_problem_areas_text
from .text import get_report_text

router = Router(name=__name__)


recommendations = {
    "revenue": {
    "-5<dyn_week<0":
    """
–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –¥–∏–Ω–∞–º–∏–∫—É –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ - –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–æ –ø–æ–≤–æ–¥–∞ –¥–ª—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –ø–æ–∫–∞ –Ω–µ—Ç.
    """,

    "dyn_week<-5":
    """
–¢–∞–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –≤—ã—Ä—É—á–∫—É –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:
1. –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –∏ –≥–æ—Ä–æ–¥–≤–∏–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
2. –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
3. –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
4. –ú–∞—Ö–∏–Ω–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

–ï—Å–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å, –≤–∞–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø–æ–º–µ—Å—è—á–Ω–æ –∏ –ø–æ –≥–æ–¥–∞–º.
    """,

    "dyn_month<0":
    """
–°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –≤ –ø–æ–º–µ—Å—è—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ:

1. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é.
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ, –∞ —Ç–∞–∫–∂–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—É–¥–Ω–∏—Ö, –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π.
3. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø–∞–¥–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å:
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ–º –≥–æ—Å—Ç–µ–ø–æ—Ç–æ–∫–∞ –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (–±–∞—Ä, –∫—É—Ö–Ω—è –∏ –¥—Ä—É–≥–∏–µ)
<b>- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–∞—Å–∞–º –ø–æ—Å–µ—â–µ–Ω–∏—è
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (—Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, –Ω–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å —á–µ–∫–∞)</b>

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã—è–≤–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å—Ç–∞–ª–æ –ø—Ä–∏—á–∏–Ω–æ–π –æ–±—â–µ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –æ–±–æ—Ä–æ—Ç–∞.
    """,

    "dyn_year<0":
    """
–ï—Å–ª–∏ –≤—ã—Ä—É—á–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –æ—Ç –≥–æ–¥–∞ –∫ –≥–æ–¥—É, –Ω–∞ —Ç–∞–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ –≤–Ω–∏–º–∞–Ω–∏–µ. –ü–µ—Ä–µ—á–∏—Å–ª–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø–∞–¥–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å:
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ–º –≥–æ—Å—Ç–µ–ø–æ—Ç–æ–∫–∞ –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (–±–∞—Ä, –∫—É—Ö–Ω—è –∏ –¥—Ä—É–≥–∏–µ)
<b>- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –±–ª—é–¥
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–∞—Å–∞–º –ø–æ—Å–µ—â–µ–Ω–∏—è
- –ø–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (—Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, –Ω–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å —á–µ–∫–∞)</b>
    """
    }
}


class RecommendationCallbackData(CallbackData, prefix="rprt-recs"):
    report_type: str
    recs_types: str


class ProblemAreasCallbackData(CallbackData, prefix="rprt-prars"):
    report_type: str


# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
@router.callback_query(ProblemAreasCallbackData.filter(), FSMReportGeneral.idle)
async def problem_areas_callback_handler(query: CallbackQuery, callback_data: ProblemAreasCallbackData, state: FSMContext):
    assert isinstance(query.message, Message)

    cb_report_type = callback_data.report_type
    state_data = await state.get_data()
    report_parameters = get_report_parameters_from_state_data(state_data)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞
    if "report" not in state_data.keys() or state_data["report"] is None:
        await query.message.edit_text("–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –µ—â—ë —Ä–∞–∑", reply_markup=IKM(inline_keyboard=[[IKB(text='–í –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ ‚Ü©Ô∏è', callback_data='report_menu')]]))
        return

    report = state_data["report"]

    if report_parameters is None:
        await query.message.edit_text("–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –µ—â—ë —Ä–∞–∑", reply_markup=IKM(inline_keyboard=[[IKB(text='–í –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ ‚Ü©Ô∏è', callback_data='report_menu')]]))
        return

    report_type, report_departments, report_period = report_parameters

    if report_type != cb_report_type:
        await query.message.edit_text("–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –µ—â—ë —Ä–∞–∑", reply_markup=IKM(inline_keyboard=[[IKB(text='–í –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ ‚Ü©Ô∏è', callback_data='report_menu')]]))
        return

    # –≤—ã–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    text = (
        "<i>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: <b>{report_types.get(report_type)}</b></i> <i>–∑–∞ {report_periods.get(report_period)}:</i> üëá"
        + get_problem_areas_text(report_type, report)
    )

    await query.message.answer(text, reply_markup=IKM(inline_keyboard=[[IKB(text='–í –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤ ‚Ü©Ô∏è', callback_data='report_menu')]]))
    await query.answer()


def get_revenue_recommendation_types(dynamic_week, dynamic_month, dynamic_year) -> str:
    types = []

    if dynamic_week is not None:
        if -5 < dynamic_week < 0:
            types.append("-5<dyn_week<0")
        elif dynamic_week < -5:
            types.append("dyn_week<-5")

    if dynamic_month is not None:
        if dynamic_month < 0:
            types.append("dyn_month<0")

    if dynamic_year is not None:
        if dynamic_year < 0:
            types.append("dyn_year<0")

    return ";".join(types)


@router.callback_query(RecommendationCallbackData.filter(F.report_type == "revenue"))
async def send_revenue_recs(query: CallbackQuery, callback_data: RecommendationCallbackData):
    texts = []

    for rec_type in callback_data.recs_types.split(';'):
        text = recommendations[callback_data.report_type][rec_type]
        texts.append(text)

    assert isinstance(query.message, Message)

    await query.message.answer("<b>–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ üîé</b>" + "\n".join(texts))

    await query.answer()
