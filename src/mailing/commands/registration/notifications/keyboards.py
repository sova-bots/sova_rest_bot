from aiogram import types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup


periodicity_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="sub_daily")],
        [types.InlineKeyboardButton(text="–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)", callback_data="sub_workdays")],
        [types.InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="sub_weekly")],
        [types.InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="sub_monthly")]
    ])


timezone_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ú–°–ö-1", callback_data="tz_-1"), InlineKeyboardButton(text="–ú–°–ö", callback_data="tz_0")],
    [InlineKeyboardButton(text="–ú–°–ö+1", callback_data="tz_1"),
     InlineKeyboardButton(text="–ú–°–ö+2", callback_data="tz_2")],
    [InlineKeyboardButton(text="–ú–°–ö+2", callback_data="tz_2"),
     InlineKeyboardButton(text="–ú–°–ö+3", callback_data="tz_3")],
    [InlineKeyboardButton(text="–ú–°–ö+4", callback_data="tz_4"),
     InlineKeyboardButton(text="–ú–°–ö+5", callback_data="tz_5")],
    [InlineKeyboardButton(text="–ú–°–ö+6", callback_data="tz_6"),
     InlineKeyboardButton(text="–ú–°–ö+7", callback_data="tz_7")],
    [InlineKeyboardButton(text="–ú–°–ö+8", callback_data="tz_8"),
     InlineKeyboardButton(text="–ú–°–ö+9", callback_data="tz_9")],

])


weekdays_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_0")],
            [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_2")],
            [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_3")],
            [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_4")],
            [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="day_5")],
            [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="day_6")]
        ])

def get_action_report_markup(report_type: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É)"""
    inline_kb = [
        [types.InlineKeyboardButton(text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å–µ–π—á–∞—Å", callback_data=f"generate_text_{report_type}")],
        [types.InlineKeyboardButton(text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç-—Ñ–∞–π–ª —Å–µ–π—á–∞—Å", callback_data=f"generate_now_{report_type}")],
        [types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"subscribe_{report_type}")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)


def get_report_markup() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞"""
    inline_kb = [
        [types.InlineKeyboardButton(text='–ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏', callback_data='report_revenue_analysis')],
        [types.InlineKeyboardButton(text='–¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç', callback_data='report_turnover')],
        [types.InlineKeyboardButton(text='–¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç (–¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)',
                                    callback_data='report_turnover_by_objects')],
        [types.InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤', callback_data='report_loss_forecast')],
        [types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data='report_inventory')],
        [types.InlineKeyboardButton(text='–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤', callback_data='report_food_cost')],
        [types.InlineKeyboardButton(text='–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)',
                                    callback_data='report_food_cost_dynamics')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)


def get_report_markup() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞"""
    inline_kb = [
        [types.InlineKeyboardButton(text='–ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏', callback_data='report_revenue_analysis')],
        [types.InlineKeyboardButton(text='–¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç', callback_data='report_turnover')],
        [types.InlineKeyboardButton(text='–¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç (–¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)',
                                    callback_data='report_turnover_by_objects')],
        [types.InlineKeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤', callback_data='report_loss_forecast')],
        [types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data='report_inventory')],
        [types.InlineKeyboardButton(text='–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤', callback_data='report_food_cost')],
        [types.InlineKeyboardButton(text='–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)',
                                    callback_data='report_food_cost_dynamics')],
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        [types.InlineKeyboardButton(text="–í—ã—Ä—É—á–∫–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç)", callback_data="text_report_revenue")],
        [types.InlineKeyboardButton(text="–ü–æ—Ç–µ—Ä–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç)", callback_data="text_report_losses")],
        [types.InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç)", callback_data="text_report_purchases")],
        [types.InlineKeyboardButton(text="–§—É–¥–∫–æ—Å—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç)", callback_data="text_report_food_cost")],
        [types.InlineKeyboardButton(text="–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç)", callback_data="text_report_turnover")],
        [types.InlineKeyboardButton(text="–ê–Ω—Ç–∏–≤–æ—Ä (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç)", callback_data="text_report_antitheft")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)




def get_format_markup(report_type: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞ (PDF –∏–ª–∏ Excel) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞"""
    inline_kb = []

    if report_type == 'revenue_analysis':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF revenue_analysis", callback_data=f"revenue_analysis_pdf")],
            [types.InlineKeyboardButton(text="Excel revenue_analysis", callback_data=f"revenue_analysis_excel")]
        ]
    elif report_type == 'turnover':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF turnover", callback_data=f"format_pdf_turnover")],
            [types.InlineKeyboardButton(text="Excel turnover", callback_data=f"format_excel_turnover")]
        ]
    elif report_type == 'turnover_by_objects':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF turnover_by_objects", callback_data=f"format_pdf_turnover_by_objects")],
            [types.InlineKeyboardButton(text="Excel turnover_by_objects", callback_data=f"format_excel_turnover_by_objects")]
        ]
    elif report_type == 'loss_forecast':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF loss_forecast", callback_data=f"format_pdf_loss_forecast")],
            [types.InlineKeyboardButton(text="Excel loss_forecast", callback_data=f"format_excel_loss_forecast")]
        ]
    elif report_type == 'inventory':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF inventory", callback_data=f"inventory_pdf")],
            [types.InlineKeyboardButton(text="Excel inventory", callback_data=f"inventory_excel")]
        ]
    elif report_type == 'food_cost':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF food_cost", callback_data=f"format_pdf_food_cost")],
            [types.InlineKeyboardButton(text="Excel food_cost", callback_data=f"format_excel_food_cost")]
        ]
    elif report_type == 'food_cost_dynamics':
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF food_cost_dynamics", callback_data=f"format_pdf_food_cost_dynamics")],
            [types.InlineKeyboardButton(text="Excel food_cost_dynamics", callback_data=f"format_excel_food_cost_dynamics")]
        ]
    else:
        # –ï—Å–ª–∏ report_type –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        inline_kb = [
            [types.InlineKeyboardButton(text="PDF –ø—É—Å—Ç–æ", callback_data=f"default_pdf")],
            [types.InlineKeyboardButton(text="Excel –ø—É—Å—Ç–æ", callback_data=f"default_excel")]
        ]

    return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)


report_mailing_format_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="PDF", callback_data="format_pdf")],
    [InlineKeyboardButton(text="Excel", callback_data="format_excel")]
])


from src.analytics.constant.variants import all_periods


periods_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=key)]
        for key, name in all_periods.items()
    ]
)

def get_main_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


report_end_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ü—Ä–∏—Å–ª–∞—Ç—å PDF –æ—Ç—á—ë—Ç üìà", callback_data="report:send_pdf_report"),
        InlineKeyboardButton(text="–ü—Ä–∏—Å–ª–∞—Ç—å EXCEL –æ—Ç—á—ë—Ç üìä", callback_data="report:send_excel_report"),
        InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]
])
