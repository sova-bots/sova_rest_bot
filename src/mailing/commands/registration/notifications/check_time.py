import logging
from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import time
import pytz
import asyncpg
import re
from typing import Optional
import config as cf
from src.analytics.api import get_reports, get_reports_from_state
from src.analytics.constant.urls import all_report_urls
from src.analytics.db.db import get_report_hint_text
from src.analytics.handlers.text.recommendations import recommendations
from src.analytics.handlers.text.revenue_texts import revenue_analysis_text, revenue_recommendations
from src.analytics.handlers.text.texts import text_functions
from src.analytics.handlers.types.text_data import TextData
from src.analytics.constant.variants import all_departments, all_branches, all_types, all_periods
from src.basic.commands.start_command import start_handler
from src.mailing.commands.registration.notifications.keyboards import get_main_menu_keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))
DB_CONFIG = cf.DB_CONFIG

subscription_router = Router()

@subscription_router.callback_query(F.data == "main_menu")
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await start_handler(callback.from_user.id, callback.message, state)


async def get_department_name(tgid: int, department_id: str) -> str:
    departments = await all_departments(tgid)
    return departments.get(department_id, department_id)


async def generate_report(
        tgid: int,
        state_data: dict,
        type_prefix: str = "",
        only_negative: bool = False,
        recommendations: bool = False
) -> list[str]:
    report_type = state_data.get("report:type")
    format_type = state_data.get("report:format_type", "")
    period = state_data.get("report:period")
    department_uuid = state_data.get("report:department")
    department = str(department_uuid) if department_uuid else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ format_type
    is_recommendations = format_type == "recommendations"
    is_analysis = format_type == "analysis" or format_type.startswith("analysis_")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è URL –¥–ª—è –æ—Ç—á–µ—Ç–∞
    if report_type not in all_report_urls:
        available_reports = "\n".join([f"- {k}" for k in all_report_urls.keys()])
        raise ValueError(
            f'–î–ª—è —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ "{report_type}" –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω URL.\n'
            f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤:\n{available_reports}'
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    used_prefix = ""
    if is_analysis:
        used_prefix = "analysis."
    elif is_recommendations and report_type == "revenue":
        used_prefix = "recommendations."

    reports = await get_reports_from_state(tgid=tgid, state_data=state_data, type_prefix=used_prefix)

    if None in reports:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞.")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    text_func_key = used_prefix + report_type
    text_func = text_functions.get(text_func_key)
    if not text_func:
        raise ValueError(f"–ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ '{report_type}' —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{used_prefix}'")

    text_data = TextData(reports=reports, period=period, department=department,
                         only_negative=is_analysis and "only_negative" in format_type)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    texts = text_func(text_data)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if is_recommendations and report_type == "revenue":
        texts.extend(revenue_analysis_text(text_data, msg_type="revenue_recomendations"))

    return texts


async def get_subscriptions_from_db():
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        result = await conn.fetch(''' 
            SELECT user_id, subscription_type, periodicity, weekday, day_of_month, time, timezone_offset, 
                   date_periodity, department, report_type, menu_buttons as format_type
            FROM subscriptions 
            WHERE periodicity IN ('daily', 'weekly', 'monthly')
        ''')
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return []
    finally:
        await conn.close()

async def add_subscription_task(
    bot: Bot,
    user_id: int,
    sub_type: str,
    periodicity: str,
    weekday: Optional[int],
    day_of_month: Optional[int],
    time_obj: time,
    date_periodity: str,
    report_type: str,
    department: str,
    menu_buttons: str = ""  # –ò—Å–ø–æ–ª—å–∑—É–µ–º menu_buttons –≤–º–µ—Å—Ç–æ format_type
):
    hour, minute = time_obj.hour, time_obj.minute
    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {hour}:{minute} –¥–ª—è –æ—Ç—á—ë—Ç–∞ {sub_type}.")

    if periodicity == "daily":
        trigger = CronTrigger(hour=hour, minute=minute, timezone=pytz.timezone("Europe/Moscow"))
    elif periodicity == "weekly":
        trigger = CronTrigger(day_of_week=weekday, hour=hour, minute=minute, timezone=pytz.timezone("Europe/Moscow"))
    elif periodicity == "monthly":
        trigger = CronTrigger(day=day_of_month, hour=hour, minute=minute, timezone=pytz.timezone("Europe/Moscow"))
    elif periodicity == "workdays":
        trigger = CronTrigger(day_of_week='mon-fri', hour=hour, minute=minute, timezone=pytz.timezone("Europe/Moscow"))
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {periodicity}")

    scheduler.add_job(
        send_report,
        trigger,
        args=[bot, user_id, report_type, date_periodity, department, menu_buttons],  # –ü–µ—Ä–µ–¥–∞–µ–º menu_buttons
        id=f"report_{user_id}_{sub_type}_{periodicity}_{hour}_{minute}",
        replace_existing=True
    )
    logging.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")


async def send_report(
        bot: Bot,
        user_id: int,
        report_type: str,
        date_periodity: str,
        department: str,
        format_type: str = ""
):
    logging.info(
        f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Ç—á–µ—Ç: {report_type}, –ø–µ—Ä–∏–æ–¥: {date_periodity}, —Ñ–æ—Ä–º–∞—Ç: {format_type}"
    )

    try:
        state_data = {
            "report:type": report_type,
            "report:period": date_periodity,
            "report:department": department,
            "report:format_type": format_type
        }

        department_name = await get_department_name(user_id, department)

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
        report_name = all_branches.get(report_type) or all_types.get(report_type, report_type)
        period_name = all_periods.get(date_periodity, date_periodity)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = (
            f"üìä <b>–û—Ç—á—ë—Ç:</b> {report_name}\n"
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period_name}\n"
            f"üìç <b>–û–±—ä–µ–∫—Ç:</b> {department_name}\n\n"
        )

        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ===
        if format_type == "recommendations":
            if report_type == "revenue":
                reports = await get_reports_from_state(tgid=user_id, state_data=state_data, type_prefix="analysis.")
                if None in reports:
                    await bot.send_message(
                        user_id,
                        header + "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞.",
                        parse_mode="HTML",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return

                text_data = TextData(reports=reports, period=date_periodity, department=department, only_negative=True)
                texts = revenue_analysis_text(text_data, recommendations=True)

                if not texts:
                    await bot.send_message(
                        user_id,
                        header + "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        parse_mode="HTML",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return

                for i, text in enumerate(texts):
                    is_html = bool(re.search(r"</?\w+.*?>", text))
                    parse_mode = "HTML" if is_html else "Markdown"

                    if i == 0 and not any(tag in text for tag in ["üìç", "üìä", "üìÖ", "<b>–û–±—ä–µ–∫—Ç", "<code>–û–±—ä–µ–∫—Ç"]):
                        text = header + text
                    await bot.send_message(user_id, text, parse_mode=parse_mode)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π
                report_hint = await get_report_hint_text(user_id, report_type, format_type)
                if report_hint:
                    hint_text = f"<b>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> <a href='{report_hint['url']}'>{report_hint['description']}</a>"
                    await bot.send_message(user_id, hint_text, parse_mode="HTML")

                await bot.send_message(
                    user_id,
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=get_main_menu_keyboard()
                )

                logging.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ revenue –æ—Ç—á—ë—Ç—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                return
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
                recommendations_text = recommendations.get(report_type, "")
                if recommendations_text:
                    await bot.send_message(
                        user_id,
                        header + "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n" + recommendations_text,
                        parse_mode="HTML",
                        reply_markup=get_main_menu_keyboard()
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π
                    report_hint = await get_report_hint_text(user_id, report_type, format_type)
                    if report_hint:
                        hint_text = f"<b>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> <a href='{report_hint['url']}'>{report_hint['description']}</a>"
                        await bot.send_message(user_id, hint_text, parse_mode="HTML")

                    logging.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç—á—ë—Ç—É {report_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                    return
                else:
                    await bot.send_message(
                        user_id,
                        header + "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        parse_mode="HTML",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return

        # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ===
        texts = await generate_report(tgid=user_id, state_data=state_data)

        for i, text in enumerate(texts):
            is_html = bool(re.search(r"</?\w+.*?>", text))
            parse_mode = "HTML" if is_html else "Markdown"

            if i == 0:
                if any(tag in text for tag in ["üìç", "üìä", "üìÖ", "<b>–û–±—ä–µ–∫—Ç", "<code>–û–±—ä–µ–∫—Ç"]):
                    await bot.send_message(user_id, text, parse_mode=parse_mode)
                else:
                    await bot.send_message(user_id, header + text, parse_mode=parse_mode)
            else:
                await bot.send_message(user_id, text, parse_mode=parse_mode)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_hint = await get_report_hint_text(user_id, report_type, format_type)
        if report_hint:
            hint_text = f"<b>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> <a href='{report_hint['url']}'>{report_hint['description']}</a>"
            await bot.send_message(user_id, hint_text, parse_mode="HTML")

        await bot.send_message(
            user_id,
            "–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

        logging.info(f"–û—Ç—á—ë—Ç {report_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


async def schedule_all_subscriptions(bot: Bot):
    subscriptions = await get_subscriptions_from_db()
    for sub in subscriptions:
        if not sub.get('report_type'):
            logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç report_type –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sub['user_id']}")
            continue

        await add_subscription_task(
            bot=bot,
            user_id=sub['user_id'],
            sub_type=sub['subscription_type'],
            periodicity=sub['periodicity'],
            weekday=sub['weekday'],
            day_of_month=sub['day_of_month'],
            time_obj=sub['time'],
            date_periodity=sub['date_periodity'],
            report_type=sub['report_type'],
            department=sub['department'],
            menu_buttons=sub.get('format_type', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º format_type –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        )


def start_scheduler():
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")


logging.basicConfig(level=logging.INFO)
